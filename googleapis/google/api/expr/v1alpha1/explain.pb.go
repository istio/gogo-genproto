// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/api/expr/v1alpha1/explain.proto

package google_api_expr_v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Values of intermediate expressions produced when evaluating expression.
// Deprecated, use `EvalState` instead.
//
// Deprecated: Do not use.
type Explain struct {
	// All of the observed values.
	//
	// The field value_index is an index in the values list.
	// Separating values from steps is needed to remove redundant values.
	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// List of steps.
	//
	// Repeated evaluations of the same expression generate new ExprStep
	// instances. The order of such ExprStep instances matches the order of
	// elements returned by Comprehension.iter_range.
	ExprSteps []*Explain_ExprStep `protobuf:"bytes,2,rep,name=expr_steps,json=exprSteps,proto3" json:"expr_steps,omitempty"`
}

func (m *Explain) Reset()         { *m = Explain{} }
func (m *Explain) String() string { return proto.CompactTextString(m) }
func (*Explain) ProtoMessage()    {}
func (*Explain) Descriptor() ([]byte, []int) {
	return fileDescriptor_2df9793dd8748e27, []int{0}
}
func (m *Explain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Explain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Explain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Explain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Explain.Merge(m, src)
}
func (m *Explain) XXX_Size() int {
	return m.Size()
}
func (m *Explain) XXX_DiscardUnknown() {
	xxx_messageInfo_Explain.DiscardUnknown(m)
}

var xxx_messageInfo_Explain proto.InternalMessageInfo

func (m *Explain) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Explain) GetExprSteps() []*Explain_ExprStep {
	if m != nil {
		return m.ExprSteps
	}
	return nil
}

// ID and value index of one step.
type Explain_ExprStep struct {
	// ID of corresponding Expr node.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Index of the value in the values list.
	ValueIndex int32 `protobuf:"varint,2,opt,name=value_index,json=valueIndex,proto3" json:"value_index,omitempty"`
}

func (m *Explain_ExprStep) Reset()         { *m = Explain_ExprStep{} }
func (m *Explain_ExprStep) String() string { return proto.CompactTextString(m) }
func (*Explain_ExprStep) ProtoMessage()    {}
func (*Explain_ExprStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_2df9793dd8748e27, []int{0, 0}
}
func (m *Explain_ExprStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Explain_ExprStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Explain_ExprStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Explain_ExprStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Explain_ExprStep.Merge(m, src)
}
func (m *Explain_ExprStep) XXX_Size() int {
	return m.Size()
}
func (m *Explain_ExprStep) XXX_DiscardUnknown() {
	xxx_messageInfo_Explain_ExprStep.DiscardUnknown(m)
}

var xxx_messageInfo_Explain_ExprStep proto.InternalMessageInfo

func (m *Explain_ExprStep) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Explain_ExprStep) GetValueIndex() int32 {
	if m != nil {
		return m.ValueIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*Explain)(nil), "google.api.expr.v1alpha1.Explain")
	proto.RegisterType((*Explain_ExprStep)(nil), "google.api.expr.v1alpha1.Explain.ExprStep")
}

func init() {
	proto.RegisterFile("google/api/expr/v1alpha1/explain.proto", fileDescriptor_2df9793dd8748e27)
}

var fileDescriptor_2df9793dd8748e27 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xad, 0x28, 0x28, 0xd2, 0x2f, 0x33, 0x4c, 0xcc,
	0x29, 0xc8, 0x48, 0x34, 0x04, 0xf1, 0x72, 0x12, 0x33, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x24, 0x20, 0xea, 0xf4, 0x12, 0x0b, 0x32, 0xf5, 0x40, 0xea, 0xf4, 0x60, 0xea, 0xa4, 0x54,
	0x70, 0x9a, 0x50, 0x96, 0x98, 0x53, 0x9a, 0x0a, 0xd1, 0xaf, 0x74, 0x8e, 0x91, 0x8b, 0xdd, 0x15,
	0x62, 0xa2, 0x90, 0x39, 0x17, 0x1b, 0x58, 0xaa, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48,
	0x5e, 0x0f, 0x97, 0xe1, 0x7a, 0x61, 0x20, 0x75, 0x41, 0x50, 0xe5, 0x42, 0x9e, 0x5c, 0x5c, 0x20,
	0xe9, 0xf8, 0xe2, 0x92, 0xd4, 0x82, 0x62, 0x09, 0x26, 0xb0, 0x66, 0x2d, 0xdc, 0x9a, 0xa1, 0xf6,
	0x81, 0xe8, 0xa2, 0xe0, 0x92, 0xd4, 0x82, 0x20, 0xce, 0x54, 0x28, 0xab, 0x58, 0xca, 0x9a, 0x8b,
	0x03, 0x26, 0x2c, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4,
	0x94, 0x99, 0x22, 0x24, 0xcf, 0xc5, 0x0d, 0xb6, 0x30, 0x3e, 0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82,
	0x49, 0x81, 0x51, 0x83, 0x35, 0x88, 0x0b, 0x2c, 0xe4, 0x09, 0x12, 0xb1, 0x62, 0x92, 0x60, 0x74,
	0xf2, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x2e, 0x99, 0xe4, 0xfc, 0x5c,
	0x9c, 0x8e, 0x72, 0xe2, 0x81, 0xba, 0x2a, 0x00, 0x14, 0x2c, 0x01, 0x8c, 0x3f, 0x18, 0x19, 0x93,
	0xd8, 0xc0, 0x41, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x02, 0xe0, 0xd3, 0x69, 0x8c, 0x01,
	0x00, 0x00,
}

func (m *Explain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Explain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Explain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExprSteps) > 0 {
		for iNdEx := len(m.ExprSteps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExprSteps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Explain_ExprStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Explain_ExprStep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Explain_ExprStep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueIndex != 0 {
		i = encodeVarintExplain(dAtA, i, uint64(m.ValueIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintExplain(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExplain(dAtA []byte, offset int, v uint64) int {
	offset -= sovExplain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Explain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	if len(m.ExprSteps) > 0 {
		for _, e := range m.ExprSteps {
			l = e.Size()
			n += 1 + l + sovExplain(uint64(l))
		}
	}
	return n
}

func (m *Explain_ExprStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovExplain(uint64(m.Id))
	}
	if m.ValueIndex != 0 {
		n += 1 + sovExplain(uint64(m.ValueIndex))
	}
	return n
}

func sovExplain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExplain(x uint64) (n int) {
	return sovExplain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Explain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Explain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Explain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExprSteps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExprSteps = append(m.ExprSteps, &Explain_ExprStep{})
			if err := m.ExprSteps[len(m.ExprSteps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Explain_ExprStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExprStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExprStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIndex", wireType)
			}
			m.ValueIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExplain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExplain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExplain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExplain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExplain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExplain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExplain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExplain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExplain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExplain   = fmt.Errorf("proto: integer overflow")
)
